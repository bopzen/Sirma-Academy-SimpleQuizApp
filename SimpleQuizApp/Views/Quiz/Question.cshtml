@model SimpleQuizApp.Models.QuestionViewModel

<h1 class="display-4 mb-4">General Knowledge Quiz - <span class="fw-normal">Level: @Model.Difficulty</span></h1>
<h3 class="mb-2">Question @Model.CurrentIndex of @Model.TotalQuestions</h3>

<div class="text-center fw-bold border-bottom mb-3 pb-2">
    Time Remaining: <span id="timer"></span>
</div>

<div class="d-flex justify-content-between align-items-center mb-3">
    @for (int i = 1; i <= Model.TotalQuestions; i++)
    {
        var isCompleted = i <= Model.CurrentIndex;
        <div class="flex-fill mx-1">
            <div class="text-center py-1 rounded fw-bold @(isCompleted ? "bg-secondary text-white" : "border border-secondary text-secondary")">@i</div>
        </div>
    }
</div>


<form method="post" asp-action="Question">
    <p class="fw-bold">@Model.Question</p>
    <div class="mb-4">
        @foreach (var option in Model.Options)
        {
            <label class="border rounded-pill shadow w-50 mb-3 px-3 p-2">
                <input class="me-2" type="radio" name="SelectedAnswer" value="@option" required /> @option
            </label>
        }
    </div>


    <input type="hidden" name="Id" value="@Model.Id" />
    <input type="hidden" name="CurrentIndex" value="@Model.CurrentIndex" />

    <button type="submit" class="shadow rounded-pill btn btn-primary mt-3 w-25 fw-bold">Next</button>
</form>

<a asp-controller="Quiz" asp-action="Start" asp-route-difficulty="@Model.Difficulty" class="shadow rounded-pill btn btn-success mt-3 w-25 fw-bold">Retake Quiz</a>

@section Scripts {
    <script>
        let seconds = @Model.RemainingSeconds;
        const timer = document.getElementById("timer");

        function updateTimer() {
            if (seconds <= 0) {
                window.location.href = '@Url.Action("Result")';
                return;
            }

            if (seconds <= 30) {
            timer.style.color = "red";
            } else {
                timer.style.color = "";
            }

            const min = Math.floor(seconds / 60);
            const sec = seconds % 60;
            timer.textContent = `${min}:${sec.toString().padStart(2, '0')}`;
            seconds--;
        }

        updateTimer();
        setInterval(updateTimer, 1000);
    </script>
}